# Copyright 2024 The Outline Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3"

vars:
  # This needs to be updated if the file moves.
  REPO_ROOT: '{{joinPath .TASKFILE_DIR ".."}}'
  # TODO: Output to $REPO_ROOT/output/client/tun2socks instead.
  OUT_DIR: '{{joinPath .REPO_ROOT "output/client"}}'
  BIN_DIR: '{{joinPath .OUT_DIR "/bin"}}'
  MOBILE_PKG: "{{.REPO_ROOT}}/outline/tun2socks"
  GOMOBILE_BIND_CMD: 'env PATH="{{.BIN_DIR}}:${PATH}" CGO_CFLAGS=''-fstack-protector-strong'' ''{{.BIN_DIR}}/gomobile'' bind -ldflags=''-s -w'''

tasks:
  electron:
    desc: "Build the tun2socks binary and library for Electron platforms"
    internal: true
    requires: { vars: [TARGET_OS, TARGET_ARCH, ZIG_TARGET] }
    vars:
      # TODO(fortuna): remove this, it's not really needed since we don't release it separately anymore.
      TUN2SOCKS_VERSION: "v1.16.11"
      OUTPUT: '{{.OUT_DIR}}/{{.TARGET_OS}}-{{.TARGET_ARCH}}/tun2socks{{if eq .TARGET_OS "windows"}}.exe{{end}}'
      # Linux=libbackend.so; Windows=backend.dll
      OUTPUT_LIB: '{{.OUT_DIR}}/{{.TARGET_OS}}-{{.TARGET_ARCH}}/{{if eq .TARGET_OS "linux"}}libbackend.so{{else}}backend.dll{{end}}'
    cmds:
      - rm -rf "{{dir .OUTPUT}}" && mkdir -p "{{dir .OUTPUT}}"
      # C cross-compile (zig) targets:
      #   Linux (x64)   = x86_64-linux-gnu.2.27 (`x86_64-linux` defaults to `x86_64-linux-musl`, prefer `gnu` over `musl`)
      #   Windows (x86) = x86-windows
      # Cross-compilation must always be enabled regardless of the native OS because:
      #   Windows: requires 32-bit
      #   Linux: requires older glibc for wider compatibility
      # Linker flags: https://pkg.go.dev/cmd/link
      #   -s Omit the symbol table and debug information.
      #   -w Omit the DWARF symbol table.
      #   -X Set the value of the string variable.
      - |
        GOOS={{.TARGET_OS}} GOARCH={{.TARGET_ARCH}} CGO_ENABLED=1 \
        CC='zig cc -target {{.ZIG_TARGET}}' \
        go build -trimpath -ldflags="-s -w -X=main.version={{.TUN2SOCKS_VERSION}}" -o '{{.OUTPUT}}' '{{.REPO_ROOT}}/outline/electron'
      - |
        GOOS={{.TARGET_OS}} GOARCH={{.TARGET_ARCH}} CGO_ENABLED=1 \
        CC='zig cc -target {{.ZIG_TARGET}}' \
        go build -trimpath -buildmode=c-shared -ldflags="-s -w -X=main.version={{.TUN2SOCKS_VERSION}}" -o '{{.OUTPUT_LIB}}' '{{.REPO_ROOT}}/outline/electron'

  windows:
    deps: [windows:386]

  windows:*:
    desc: "Build the tun2socks binary and library for Windows"
    vars:
      TARGET_ARCH: '{{index .MATCH 0 | default "386"}}'
      CC_ARCH: '{{get (dict "amd64" "x86_64" "arm64" "aarch64" "386" "x86" ) .TARGET_ARCH | default .TARGET_ARCH}}'
    # 32bit Windows 10 still exists until October 14, 2025
    cmds:
      - {
          task: electron,
          vars:
            {
              TARGET_OS: "windows",
              TARGET_ARCH: "{{.TARGET_ARCH}}",
              ZIG_TARGET: "{{.CC_ARCH}}-windows",
            },
        }

  linux:
    deps: [linux:amd64]

  linux:*:
    desc: "Build the tun2socks binary and library for Linux"
    vars:
      TARGET_ARCH: '{{index .MATCH 0 | default "amd64"}}'
      CC_ARCH: '{{get (dict "amd64" "x86_64" "arm64" "aarch64" "386" "x86" ) .TARGET_ARCH | default .TARGET_ARCH}}'
    cmds:
      - {
          task: electron,
          vars:
            {
              TARGET_OS: "linux",
              TARGET_ARCH: "{{.TARGET_ARCH}}",
              ZIG_TARGET: "{{.CC_ARCH}}-linux-gnu.2.27",
            },
        }

  android:
    desc: "Build the tun2socks.aar library for Android"
    vars:
      TARGET_DIR: "{{.OUT_DIR}}/android/org/getoutline/client/tun2socks/0.0.1"
      # ANDROID_API must match the minSdkVersion that the Android client supports.
      ANDROID_API: 26
    env:
      # Bug workaround as per https://github.com/golang/go/issues/71827#issuecomment-2669425491
      GODEBUG: gotypesalias=0
    preconditions:
      - sh: '[[ -d "$ANDROID_HOME" ]]'
        msg: "Must set ANDROID_HOME"
      - sh: '[[ -d "$ANDROID_NDK" ]]'
        msg: "Must set ANDROID_NDK"
    cmds:
      - rm -rf "{{.TARGET_DIR}}" && mkdir -p "{{.TARGET_DIR}}"
      - "{{.GOMOBILE_BIND_CMD}} -target=android -androidapi '{{.ANDROID_API}}' -o '{{.TARGET_DIR}}/tun2socks-0.0.1.aar' '{{.REPO_ROOT}}/outline/platerrors' '{{.REPO_ROOT}}/outline/tun2socks' '{{.REPO_ROOT}}/outline'"
      - echo $'<?xml version="1.0" encoding="UTF-8"?>\n<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.getoutline.client</groupId>\n  <artifactId>tun2socks</artifactId>\n  <version>0.0.1</version>\n  <packaging>aar</packaging>\n</project>' > "{{.TARGET_DIR}}/tun2socks-0.0.1.pom"
    deps: ["gomobile"]

  # macOS specific build targets
  macos:
    desc: "Build VPN core for all macOS architectures"
    deps: [macos:amd64, macos:arm64]

  macos:*:
    desc: "Build VPN core for specific macOS architecture"
    vars:
      TARGET_ARCH: '{{index .MATCH 0 | default "amd64"}}'
      VPN_VERSION: "v1.0.0"
      OUTPUT_DIR: "{{.OUT_DIR}}/darwin-{{.TARGET_ARCH}}"
      OUTPUT_BIN: "{{.OUTPUT_DIR}}/vpn-core"
      OUTPUT_LIB: "{{.OUTPUT_DIR}}/libvpn-core.a"
    env:
      GOOS: darwin
      GOARCH: "{{.TARGET_ARCH}}"
      CGO_ENABLED: 1
      # macOS deployment target
      MACOSX_DEPLOYMENT_TARGET: 12.0
      # CGO flags for macOS
      CGO_CFLAGS: "-fstack-protector-strong -mmacosx-version-min=12.0"
      CGO_LDFLAGS: "-mmacosx-version-min=12.0"
    cmds:
      - rm -rf "{{.OUTPUT_DIR}}" && mkdir -p "{{.OUTPUT_DIR}}"
      # Build standard binary
      - |
        go build -trimpath \
        -ldflags="-s -w -X=main.version={{.VPN_VERSION}}" \
        -o '{{.OUTPUT_BIN}}' \
        '{{.REPO_ROOT}}/outline/electron'
      # Build static library for Xcode integration
      - |
        go build -trimpath \
        -buildmode=c-archive \
        -ldflags="-s -w -X=main.version={{.VPN_VERSION}}" \
        -o '{{.OUTPUT_LIB}}' \
        '{{.REPO_ROOT}}/outline/electron'

  # Universal macOS library build for Xcode integration
  macos-universal:
    desc: "Build universal macOS library for Xcode integration"
    vars:
      TARGET_DIR: "{{.OUT_DIR}}/macos-universal"
      VPN_VERSION: "v1.0.0"
    env:
      GOOS: darwin
      CGO_ENABLED: 1
      MACOSX_DEPLOYMENT_TARGET: 12.0
      CGO_CFLAGS: "-fstack-protector-strong -mmacosx-version-min=12.0"
      CGO_LDFLAGS: "-mmacosx-version-min=12.0"
    cmds:
      - rm -rf "{{.TARGET_DIR}}" && mkdir -p "{{.TARGET_DIR}}"
      # Build universal binary combining amd64 and arm64
      - mkdir -p "{{.TARGET_DIR}}/amd64" "{{.TARGET_DIR}}/arm64"
      # Build for Intel Macs
      - |
        GOARCH=amd64 go build -trimpath \
        -buildmode=c-archive \
        -ldflags="-s -w -X=main.version={{.VPN_VERSION}}" \
        -o '{{.TARGET_DIR}}/amd64/libvpn-core.a' \
        '{{.REPO_ROOT}}/outline/electron'
      # Build for Apple Silicon Macs
      - |
        GOARCH=arm64 go build -trimpath \
        -buildmode=c-archive \
        -ldflags="-s -w -X=main.version={{.VPN_VERSION}}" \
        -o '{{.TARGET_DIR}}/arm64/libvpn-core.a' \
        '{{.REPO_ROOT}}/outline/electron'
      # Create universal binary using lipo
      - |
        lipo -create \
        '{{.TARGET_DIR}}/amd64/libvpn-core.a' \
        '{{.TARGET_DIR}}/arm64/libvpn-core.a' \
        -output '{{.TARGET_DIR}}/libvpn-core.a'
      # Copy header file
      - cp '{{.TARGET_DIR}}/amd64/libvpn-core.h' '{{.TARGET_DIR}}/libvpn-core.h'

  apple:
    desc: "Build combined Tun2socks.xcframework library for Apple platforms"
    aliases: [ios, macos]
    vars:
      TARGET_DIR: "{{.OUT_DIR}}/apple"
      # MACOSX_DEPLOYMENT_TARGET must match the version the version set in the XCode project.
      MACOSX_DEPLOYMENT_TARGET: 12.0
      # TARGET_IOS_VERSION must be at least 13.1 for macCatalyst and match the version set in the XCode project.
      TARGET_IOS_VERSION: 15.5
    env:
      # Bug workaround as per https://github.com/golang/go/issues/71827#issuecomment-2669425491
      GODEBUG: gotypesalias=0
    cmds:
      - rm -rf "{{.TARGET_DIR}}" && mkdir -p "{{.TARGET_DIR}}"
      - export MACOSX_DEPLOYMENT_TARGET={{.MACOSX_DEPLOYMENT_TARGET}}; {{.GOMOBILE_BIND_CMD}} -target=ios,iossimulator,maccatalyst -iosversion={{.TARGET_IOS_VERSION}} -bundleid org.outline.tun2socks -o '{{.TARGET_DIR}}/Tun2socks.xcframework' '{{.REPO_ROOT}}/outline/platerrors' '{{.REPO_ROOT}}/outline/tun2socks' '{{.REPO_ROOT}}/outline'
    deps: ["gomobile"]

  browser:
    desc: "Placeholder for the browser build. Does nothing"

  gomobile:
    desc: "Build Go Mobile"
    internal: true
    cmds:
      - mkdir -p "{{.BIN_DIR}}"
      - go build -o "{{.BIN_DIR}}" golang.org/x/mobile/cmd/gomobile golang.org/x/mobile/cmd/gobind
    sources: ["{{.REPO_ROOT}}/go.sum"]
    generates: ["{{.BIN_DIR}}/gomobile", "{{.BIN_DIR}}/gobind"]

  clean:
    cmds:
      - rm -rf '{{.OUT_DIR}}'
      - go clean -i -r '{{.REPO_ROOT}}/outline/tun2socks' '{{.REPO_ROOT}}/outline'
