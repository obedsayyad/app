// Objective-C API for talking to github.com/Jigsaw-Code/outline-apps/client/go/outline/platerrors Go package.
//   gobind -lang=objc github.com/Jigsaw-Code/outline-apps/client/go/outline/platerrors
//
// File is generated by gobind. Do not edit.

#ifndef __Platerrors_H__
#define __Platerrors_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class PlaterrorsPlatformError;

/**
 * PlatformError represents an error that originate from the native network code.
It can be serialized to JSON and shared between Go and TypeScript.
 */
@interface PlaterrorsPlatformError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPlatformError creates a new [PlatformError] from the error code and message.

This function is primarily intended for use by Java or Swift code.
For Go code, it is recommended to construct the [PlatformError] struct directly.
 */
- (nullable instancetype)init:(NSString* _Nullable)code message:(NSString* _Nullable)message;
@property (nonatomic) NSString* _Nonnull code;
@property (nonatomic) NSString* _Nonnull message;
// skipped field PlatformError.Details with unsupported type: map[string]interface{}

@property (nonatomic) PlaterrorsPlatformError* _Nullable cause;
/**
 * Error returns a JSON string containing the error details and all its underlying causes,
until it finds a cause that is not a [PlatformError].
The resulting JSON can be used to reconstruct the error in TypeScript.
 */
- (NSString* _Nonnull)error;
/**
 * Unwrap returns the cause of this [PlatformError].
 */
- (BOOL)unwrap:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DataTransmissionFailed means we failed to copy data from one device to another.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsDataTransmissionFailed;
/**
 * DisconnectSystemVPNFailed means we failed to remove the system VPN.
This typically indicates that a reboot is needed.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsDisconnectSystemVPNFailed;
/**
 * FetchConfigFailed means we failed to fetch a config from a remote location.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsFetchConfigFailed;
/**
 * InternalError represents a general internal service error.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsInternalError;
/**
 * InvalidConfig indicates an invalid config to connect to a remote server.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsInvalidConfig;
/**
 * OperationCanceled means that user canceled the long running operation.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsOperationCanceled;
/**
 * ProviderError indicates an error returned by the provider in the Dynamic Config.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsProviderError;
/**
 * ProxyServerReadFailed means we failed to read data from a remote server.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsProxyServerReadFailed;
/**
 * ProxyServerUDPUnsupported means the remote proxy doesn't support relaying UDP traffic.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsProxyServerUDPUnsupported;
/**
 * ProxyServerUnreachable means we failed to establish a connection to a remote server.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsProxyServerUnreachable;
/**
 * ProxyServerWriteFailed means we failed to write data to a remote server.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsProxyServerWriteFailed;
/**
 * ResolveIPFailed means that we failed to resolve the IP address of a hostname.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsResolveIPFailed;
/**
 * SetupSystemVPNFailed means we failed to configure the system VPN to route to us.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsSetupSystemVPNFailed;
/**
 * SetupTrafficHandlerFailed means we failed to setup the traffic handler for a protocol.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsSetupTrafficHandlerFailed;
/**
 * Unauthenticated indicates that the client failed to communicate with a remote server
due to the lack of valid authentication credentials.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsUnauthenticated;
/**
 * VPNPermissionNotGranted means user did not grant us the required permission to setup VPN.
 */
FOUNDATION_EXPORT NSString* _Nonnull const PlaterrorsVPNPermissionNotGranted;

/**
 * MarshalJSONString returns a JSON string containing the [PlatformError] details
and all its underlying causes.
The resulting JSON can be used to reconstruct the error in TypeScript.
 */
FOUNDATION_EXPORT NSString* _Nonnull PlaterrorsMarshalJSONString(PlaterrorsPlatformError* _Nullable e, NSError* _Nullable* _Nullable error);

/**
 * NewPlatformError creates a new [PlatformError] from the error code and message.

This function is primarily intended for use by Java or Swift code.
For Go code, it is recommended to construct the [PlatformError] struct directly.
 */
FOUNDATION_EXPORT PlaterrorsPlatformError* _Nullable PlaterrorsNewPlatformError(NSString* _Nullable code, NSString* _Nullable message);

/**
 * ToPlatformError converts an [error] into a [PlatformError].
If the provided err is already a [PlatformError], it is returned as is.
Otherwise, the err is wrapped into a new [PlatformError] of [InternalError].
It returns nil if err is nil.
 */
FOUNDATION_EXPORT PlaterrorsPlatformError* _Nullable PlaterrorsToPlatformError(NSError* _Nullable err);

#endif
